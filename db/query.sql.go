// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCity = `-- name: CreateCity :one
INSERT INTO cities (
  name
) VALUES (
  ?
)
RETURNING id, name
`

func (q *Queries) CreateCity(ctx context.Context, name string) (City, error) {
	row := q.queryRow(ctx, q.createCityStmt, createCity, name)
	var i City
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createHouse = `-- name: CreateHouse :one
INSERT INTO houses (
  title,
  city_id,
  address,
  price,
  surface,
  rooms,
  bedrooms,
  bathrooms,
  floors,
  construction_year,
  house_type,
  land_surface,
  has_garage,
  outdoor_parking_spaces,
  main_photo,
  notes
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes
`

type CreateHouseParams struct {
	Title                string
	CityID               int64
	Address              sql.NullString
	Price                int64
	Surface              int64
	Rooms                sql.NullInt64
	Bedrooms             sql.NullInt64
	Bathrooms            sql.NullInt64
	Floors               sql.NullInt64
	ConstructionYear     sql.NullInt64
	HouseType            string
	LandSurface          sql.NullInt64
	HasGarage            sql.NullBool
	OutdoorParkingSpaces sql.NullInt64
	MainPhoto            sql.NullString
	Notes                sql.NullString
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (House, error) {
	row := q.queryRow(ctx, q.createHouseStmt, createHouse,
		arg.Title,
		arg.CityID,
		arg.Address,
		arg.Price,
		arg.Surface,
		arg.Rooms,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Floors,
		arg.ConstructionYear,
		arg.HouseType,
		arg.LandSurface,
		arg.HasGarage,
		arg.OutdoorParkingSpaces,
		arg.MainPhoto,
		arg.Notes,
	)
	var i House
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.CityID,
		&i.Address,
		&i.Price,
		&i.Surface,
		&i.Rooms,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Floors,
		&i.ConstructionYear,
		&i.HouseType,
		&i.LandSurface,
		&i.HasGarage,
		&i.OutdoorParkingSpaces,
		&i.MainPhoto,
		&i.Notes,
	)
	return i, err
}

const createPublicationURL = `-- name: CreatePublicationURL :one
INSERT INTO publication_urls (
  house_id,
  url,
  publication_date,
  is_main
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, house_id, url, publication_date, is_main
`

type CreatePublicationURLParams struct {
	HouseID         int64
	URL             string
	PublicationDate time.Time
	IsMain          bool
}

func (q *Queries) CreatePublicationURL(ctx context.Context, arg CreatePublicationURLParams) (PublicationURL, error) {
	row := q.queryRow(ctx, q.createPublicationURLStmt, createPublicationURL,
		arg.HouseID,
		arg.URL,
		arg.PublicationDate,
		arg.IsMain,
	)
	var i PublicationURL
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.URL,
		&i.PublicationDate,
		&i.IsMain,
	)
	return i, err
}

const deleteAllPublicationURLs = `-- name: DeleteAllPublicationURLs :exec
DELETE FROM publication_urls
WHERE house_id = ?
`

func (q *Queries) DeleteAllPublicationURLs(ctx context.Context, houseID int64) error {
	_, err := q.exec(ctx, q.deleteAllPublicationURLsStmt, deleteAllPublicationURLs, houseID)
	return err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities
WHERE id = ?
`

func (q *Queries) DeleteCity(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCityStmt, deleteCity, id)
	return err
}

const deleteHouse = `-- name: DeleteHouse :exec
DELETE FROM houses
WHERE id = ?
`

func (q *Queries) DeleteHouse(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHouseStmt, deleteHouse, id)
	return err
}

const deletePublicationURL = `-- name: DeletePublicationURL :exec
DELETE FROM publication_urls
WHERE id = ?
`

func (q *Queries) DeletePublicationURL(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deletePublicationURLStmt, deletePublicationURL, id)
	return err
}

const getCity = `-- name: GetCity :one
SELECT id, name FROM cities
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.queryRow(ctx, q.getCityStmt, getCity, id)
	var i City
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getHouse = `-- name: GetHouse :one
SELECT id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes FROM houses
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHouse(ctx context.Context, id int64) (House, error) {
	row := q.queryRow(ctx, q.getHouseStmt, getHouse, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.CityID,
		&i.Address,
		&i.Price,
		&i.Surface,
		&i.Rooms,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Floors,
		&i.ConstructionYear,
		&i.HouseType,
		&i.LandSurface,
		&i.HasGarage,
		&i.OutdoorParkingSpaces,
		&i.MainPhoto,
		&i.Notes,
	)
	return i, err
}

const getMainPublicationURL = `-- name: GetMainPublicationURL :one
SELECT id, house_id, url, publication_date, is_main FROM publication_urls
WHERE house_id = ? AND is_main = true
LIMIT 1
`

func (q *Queries) GetMainPublicationURL(ctx context.Context, houseID int64) (PublicationURL, error) {
	row := q.queryRow(ctx, q.getMainPublicationURLStmt, getMainPublicationURL, houseID)
	var i PublicationURL
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.URL,
		&i.PublicationDate,
		&i.IsMain,
	)
	return i, err
}

const getPublicationURLs = `-- name: GetPublicationURLs :many
SELECT id, house_id, url, publication_date, is_main FROM publication_urls
WHERE house_id = ?
ORDER BY is_main DESC, publication_date DESC
`

func (q *Queries) GetPublicationURLs(ctx context.Context, houseID int64) ([]PublicationURL, error) {
	rows, err := q.query(ctx, q.getPublicationURLsStmt, getPublicationURLs, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicationURL
	for rows.Next() {
		var i PublicationURL
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.URL,
			&i.PublicationDate,
			&i.IsMain,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isCityUsedByHouses = `-- name: IsCityUsedByHouses :one
SELECT EXISTS(
  SELECT 1 FROM houses WHERE city_id = ?
) AS is_used
`

func (q *Queries) IsCityUsedByHouses(ctx context.Context, cityID int64) (int64, error) {
	row := q.queryRow(ctx, q.isCityUsedByHousesStmt, isCityUsedByHouses, cityID)
	var is_used int64
	err := row.Scan(&is_used)
	return is_used, err
}

const listCities = `-- name: ListCities :many
SELECT id, name FROM cities
ORDER BY name
`

func (q *Queries) ListCities(ctx context.Context) ([]City, error) {
	rows, err := q.query(ctx, q.listCitiesStmt, listCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHouses = `-- name: ListHouses :many
SELECT id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes FROM houses
ORDER BY created_at DESC
`

func (q *Queries) ListHouses(ctx context.Context) ([]House, error) {
	rows, err := q.query(ctx, q.listHousesStmt, listHouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []House
	for rows.Next() {
		var i House
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.CityID,
			&i.Address,
			&i.Price,
			&i.Surface,
			&i.Rooms,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.Floors,
			&i.ConstructionYear,
			&i.HouseType,
			&i.LandSurface,
			&i.HasGarage,
			&i.OutdoorParkingSpaces,
			&i.MainPhoto,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :one
UPDATE cities
SET name = ?
WHERE id = ?
RETURNING id, name
`

func (q *Queries) UpdateCity(ctx context.Context, name string, iD int64) (City, error) {
	row := q.queryRow(ctx, q.updateCityStmt, updateCity, name, iD)
	var i City
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updateHouse = `-- name: UpdateHouse :one
UPDATE houses
SET updated_at = CURRENT_TIMESTAMP,
    title = ?,
    city_id = ?,
    address = ?,
    price = ?,
    surface = ?,
    rooms = ?,
    bedrooms = ?,
    bathrooms = ?,
    floors = ?,
    construction_year = ?,
    house_type = ?,
    land_surface = ?,
    has_garage = ?,
    outdoor_parking_spaces = ?,
    main_photo = ?,
    notes = ?
WHERE id = ?
RETURNING id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes
`

type UpdateHouseParams struct {
	Title                string
	CityID               int64
	Address              sql.NullString
	Price                int64
	Surface              int64
	Rooms                sql.NullInt64
	Bedrooms             sql.NullInt64
	Bathrooms            sql.NullInt64
	Floors               sql.NullInt64
	ConstructionYear     sql.NullInt64
	HouseType            string
	LandSurface          sql.NullInt64
	HasGarage            sql.NullBool
	OutdoorParkingSpaces sql.NullInt64
	MainPhoto            sql.NullString
	Notes                sql.NullString
	ID                   int64
}

func (q *Queries) UpdateHouse(ctx context.Context, arg UpdateHouseParams) (House, error) {
	row := q.queryRow(ctx, q.updateHouseStmt, updateHouse,
		arg.Title,
		arg.CityID,
		arg.Address,
		arg.Price,
		arg.Surface,
		arg.Rooms,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Floors,
		arg.ConstructionYear,
		arg.HouseType,
		arg.LandSurface,
		arg.HasGarage,
		arg.OutdoorParkingSpaces,
		arg.MainPhoto,
		arg.Notes,
		arg.ID,
	)
	var i House
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.CityID,
		&i.Address,
		&i.Price,
		&i.Surface,
		&i.Rooms,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Floors,
		&i.ConstructionYear,
		&i.HouseType,
		&i.LandSurface,
		&i.HasGarage,
		&i.OutdoorParkingSpaces,
		&i.MainPhoto,
		&i.Notes,
	)
	return i, err
}

const updatePublicationURL = `-- name: UpdatePublicationURL :one
UPDATE publication_urls
SET url = ?,
    publication_date = ?,
    is_main = ?
WHERE id = ?
RETURNING id, house_id, url, publication_date, is_main
`

type UpdatePublicationURLParams struct {
	URL             string
	PublicationDate time.Time
	IsMain          bool
	ID              int64
}

func (q *Queries) UpdatePublicationURL(ctx context.Context, arg UpdatePublicationURLParams) (PublicationURL, error) {
	row := q.queryRow(ctx, q.updatePublicationURLStmt, updatePublicationURL,
		arg.URL,
		arg.PublicationDate,
		arg.IsMain,
		arg.ID,
	)
	var i PublicationURL
	err := row.Scan(
		&i.ID,
		&i.HouseID,
		&i.URL,
		&i.PublicationDate,
		&i.IsMain,
	)
	return i, err
}
