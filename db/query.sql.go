// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createCity = `-- name: CreateCity :exec
INSERT INTO cities (
	name
) VALUES (
	?
)
RETURNING id, name
`

func (q *Queries) CreateCity(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.createCityStmt, createCity, name)
	return err
}

const createHouse = `-- name: CreateHouse :execlastid
INSERT INTO houses (
	title,
	city_id,
	address,
	price,
	surface,
	rooms,
	bedrooms,
	bathrooms,
	floors,
	construction_year,
	house_type,
	land_surface,
	has_garage,
	outdoor_parking_spaces,
	main_photo,
	notes
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateHouseParams struct {
	Title                string
	CityID               int64
	Address              string
	Price                int64
	Surface              int64
	Rooms                int64
	Bedrooms             int64
	Bathrooms            int64
	Floors               int64
	ConstructionYear     int64
	HouseType            string
	LandSurface          int64
	HasGarage            bool
	OutdoorParkingSpaces int64
	MainPhoto            string
	Notes                string
}

func (q *Queries) CreateHouse(ctx context.Context, arg CreateHouseParams) (int64, error) {
	result, err := q.exec(ctx, q.createHouseStmt, createHouse,
		arg.Title,
		arg.CityID,
		arg.Address,
		arg.Price,
		arg.Surface,
		arg.Rooms,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Floors,
		arg.ConstructionYear,
		arg.HouseType,
		arg.LandSurface,
		arg.HasGarage,
		arg.OutdoorParkingSpaces,
		arg.MainPhoto,
		arg.Notes,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createPublicationURL = `-- name: CreatePublicationURL :exec
INSERT INTO publication_urls (
	house_id,
	url,
	publication_date
) VALUES (
	?, ?, ?
)
`

type CreatePublicationURLParams struct {
	HouseID         int64
	URL             string
	PublicationDate time.Time
}

func (q *Queries) CreatePublicationURL(ctx context.Context, arg CreatePublicationURLParams) error {
	_, err := q.exec(ctx, q.createPublicationURLStmt, createPublicationURL, arg.HouseID, arg.URL, arg.PublicationDate)
	return err
}

const deleteAllPublicationURLs = `-- name: DeleteAllPublicationURLs :exec
DELETE FROM publication_urls
WHERE house_id = ?
`

func (q *Queries) DeleteAllPublicationURLs(ctx context.Context, houseID int64) error {
	_, err := q.exec(ctx, q.deleteAllPublicationURLsStmt, deleteAllPublicationURLs, houseID)
	return err
}

const deleteCity = `-- name: DeleteCity :exec
DELETE FROM cities
WHERE id = ?
`

func (q *Queries) DeleteCity(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteCityStmt, deleteCity, id)
	return err
}

const deleteHouse = `-- name: DeleteHouse :exec
DELETE FROM houses
WHERE id = ?
`

func (q *Queries) DeleteHouse(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteHouseStmt, deleteHouse, id)
	return err
}

const deletePublicationURL = `-- name: DeletePublicationURL :exec
DELETE FROM publication_urls
WHERE id = ?
`

func (q *Queries) DeletePublicationURL(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deletePublicationURLStmt, deletePublicationURL, id)
	return err
}

const getCity = `-- name: GetCity :one
SELECT id, name, is_used FROM cities_with_used
WHERE id = ? LIMIT 1
`

func (q *Queries) GetCity(ctx context.Context, id int64) (City, error) {
	row := q.queryRow(ctx, q.getCityStmt, getCity, id)
	var i City
	err := row.Scan(&i.ID, &i.Name, &i.IsUsed)
	return i, err
}

const getHouse = `-- name: GetHouse :one
SELECT id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes, city_name FROM houses_with_cities
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHouse(ctx context.Context, id int64) (House, error) {
	row := q.queryRow(ctx, q.getHouseStmt, getHouse, id)
	var i House
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.CityID,
		&i.Address,
		&i.Price,
		&i.Surface,
		&i.Rooms,
		&i.Bedrooms,
		&i.Bathrooms,
		&i.Floors,
		&i.ConstructionYear,
		&i.HouseType,
		&i.LandSurface,
		&i.HasGarage,
		&i.OutdoorParkingSpaces,
		&i.MainPhoto,
		&i.Notes,
		&i.CityName,
	)
	return i, err
}

const getPublicationURLs = `-- name: GetPublicationURLs :many
SELECT id, house_id, url, publication_date FROM publication_urls
WHERE house_id = ?
ORDER BY publication_date DESC
`

func (q *Queries) GetPublicationURLs(ctx context.Context, houseID int64) ([]PublicationURL, error) {
	rows, err := q.query(ctx, q.getPublicationURLsStmt, getPublicationURLs, houseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicationURL
	for rows.Next() {
		var i PublicationURL
		if err := rows.Scan(
			&i.ID,
			&i.HouseID,
			&i.URL,
			&i.PublicationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCities = `-- name: ListCities :many
SELECT id, name, is_used FROM cities_with_used
ORDER BY name
`

func (q *Queries) ListCities(ctx context.Context) ([]City, error) {
	rows, err := q.query(ctx, q.listCitiesStmt, listCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(&i.ID, &i.Name, &i.IsUsed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listHouses = `-- name: ListHouses :many
SELECT id, created_at, updated_at, title, city_id, address, price, surface, rooms, bedrooms, bathrooms, floors, construction_year, house_type, land_surface, has_garage, outdoor_parking_spaces, main_photo, notes, city_name FROM houses_with_cities
ORDER BY created_at DESC
`

func (q *Queries) ListHouses(ctx context.Context) ([]House, error) {
	rows, err := q.query(ctx, q.listHousesStmt, listHouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []House
	for rows.Next() {
		var i House
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.CityID,
			&i.Address,
			&i.Price,
			&i.Surface,
			&i.Rooms,
			&i.Bedrooms,
			&i.Bathrooms,
			&i.Floors,
			&i.ConstructionYear,
			&i.HouseType,
			&i.LandSurface,
			&i.HasGarage,
			&i.OutdoorParkingSpaces,
			&i.MainPhoto,
			&i.Notes,
			&i.CityName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCity = `-- name: UpdateCity :exec
UPDATE cities
SET name = ?
WHERE cities.id = ?2
`

func (q *Queries) UpdateCity(ctx context.Context, name string, iD int64) error {
	_, err := q.exec(ctx, q.updateCityStmt, updateCity, name, iD)
	return err
}

const updateHouse = `-- name: UpdateHouse :exec
UPDATE houses
SET
	updated_at = CURRENT_TIMESTAMP,
	title = ?,
	city_id = ?,
	address = ?,
	price = ?,
	surface = ?,
	rooms = ?,
	bedrooms = ?,
	bathrooms = ?,
	floors = ?,
	construction_year = ?,
	house_type = ?,
	land_surface = ?,
	has_garage = ?,
	outdoor_parking_spaces = ?,
	main_photo = ?,
	notes = ?
WHERE id = ?
`

type UpdateHouseParams struct {
	Title                string
	CityID               int64
	Address              string
	Price                int64
	Surface              int64
	Rooms                int64
	Bedrooms             int64
	Bathrooms            int64
	Floors               int64
	ConstructionYear     int64
	HouseType            string
	LandSurface          int64
	HasGarage            bool
	OutdoorParkingSpaces int64
	MainPhoto            string
	Notes                string
	ID                   int64
}

func (q *Queries) UpdateHouse(ctx context.Context, arg UpdateHouseParams) error {
	_, err := q.exec(ctx, q.updateHouseStmt, updateHouse,
		arg.Title,
		arg.CityID,
		arg.Address,
		arg.Price,
		arg.Surface,
		arg.Rooms,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.Floors,
		arg.ConstructionYear,
		arg.HouseType,
		arg.LandSurface,
		arg.HasGarage,
		arg.OutdoorParkingSpaces,
		arg.MainPhoto,
		arg.Notes,
		arg.ID,
	)
	return err
}

const updatePublicationURL = `-- name: UpdatePublicationURL :exec
UPDATE publication_urls
SET
	url = ?,
	publication_date = ?
WHERE id = ?
`

type UpdatePublicationURLParams struct {
	URL             string
	PublicationDate time.Time
	ID              int64
}

func (q *Queries) UpdatePublicationURL(ctx context.Context, arg UpdatePublicationURLParams) error {
	_, err := q.exec(ctx, q.updatePublicationURLStmt, updatePublicationURL, arg.URL, arg.PublicationDate, arg.ID)
	return err
}
