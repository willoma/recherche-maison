// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCityStmt, err = db.PrepareContext(ctx, createCity); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCity: %w", err)
	}
	if q.createHouseStmt, err = db.PrepareContext(ctx, createHouse); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHouse: %w", err)
	}
	if q.createPublicationURLStmt, err = db.PrepareContext(ctx, createPublicationURL); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePublicationURL: %w", err)
	}
	if q.deleteAllPublicationURLsStmt, err = db.PrepareContext(ctx, deleteAllPublicationURLs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAllPublicationURLs: %w", err)
	}
	if q.deleteCityStmt, err = db.PrepareContext(ctx, deleteCity); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCity: %w", err)
	}
	if q.deleteHouseStmt, err = db.PrepareContext(ctx, deleteHouse); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHouse: %w", err)
	}
	if q.deletePublicationURLStmt, err = db.PrepareContext(ctx, deletePublicationURL); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePublicationURL: %w", err)
	}
	if q.getCityStmt, err = db.PrepareContext(ctx, getCity); err != nil {
		return nil, fmt.Errorf("error preparing query GetCity: %w", err)
	}
	if q.getHouseStmt, err = db.PrepareContext(ctx, getHouse); err != nil {
		return nil, fmt.Errorf("error preparing query GetHouse: %w", err)
	}
	if q.getMainPublicationURLStmt, err = db.PrepareContext(ctx, getMainPublicationURL); err != nil {
		return nil, fmt.Errorf("error preparing query GetMainPublicationURL: %w", err)
	}
	if q.getPublicationURLsStmt, err = db.PrepareContext(ctx, getPublicationURLs); err != nil {
		return nil, fmt.Errorf("error preparing query GetPublicationURLs: %w", err)
	}
	if q.isCityUsedByHousesStmt, err = db.PrepareContext(ctx, isCityUsedByHouses); err != nil {
		return nil, fmt.Errorf("error preparing query IsCityUsedByHouses: %w", err)
	}
	if q.listCitiesStmt, err = db.PrepareContext(ctx, listCities); err != nil {
		return nil, fmt.Errorf("error preparing query ListCities: %w", err)
	}
	if q.listHousesStmt, err = db.PrepareContext(ctx, listHouses); err != nil {
		return nil, fmt.Errorf("error preparing query ListHouses: %w", err)
	}
	if q.updateCityStmt, err = db.PrepareContext(ctx, updateCity); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCity: %w", err)
	}
	if q.updateHouseStmt, err = db.PrepareContext(ctx, updateHouse); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateHouse: %w", err)
	}
	if q.updatePublicationURLStmt, err = db.PrepareContext(ctx, updatePublicationURL); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePublicationURL: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCityStmt != nil {
		if cerr := q.createCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCityStmt: %w", cerr)
		}
	}
	if q.createHouseStmt != nil {
		if cerr := q.createHouseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHouseStmt: %w", cerr)
		}
	}
	if q.createPublicationURLStmt != nil {
		if cerr := q.createPublicationURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPublicationURLStmt: %w", cerr)
		}
	}
	if q.deleteAllPublicationURLsStmt != nil {
		if cerr := q.deleteAllPublicationURLsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAllPublicationURLsStmt: %w", cerr)
		}
	}
	if q.deleteCityStmt != nil {
		if cerr := q.deleteCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCityStmt: %w", cerr)
		}
	}
	if q.deleteHouseStmt != nil {
		if cerr := q.deleteHouseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHouseStmt: %w", cerr)
		}
	}
	if q.deletePublicationURLStmt != nil {
		if cerr := q.deletePublicationURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePublicationURLStmt: %w", cerr)
		}
	}
	if q.getCityStmt != nil {
		if cerr := q.getCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCityStmt: %w", cerr)
		}
	}
	if q.getHouseStmt != nil {
		if cerr := q.getHouseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHouseStmt: %w", cerr)
		}
	}
	if q.getMainPublicationURLStmt != nil {
		if cerr := q.getMainPublicationURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMainPublicationURLStmt: %w", cerr)
		}
	}
	if q.getPublicationURLsStmt != nil {
		if cerr := q.getPublicationURLsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPublicationURLsStmt: %w", cerr)
		}
	}
	if q.isCityUsedByHousesStmt != nil {
		if cerr := q.isCityUsedByHousesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isCityUsedByHousesStmt: %w", cerr)
		}
	}
	if q.listCitiesStmt != nil {
		if cerr := q.listCitiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listCitiesStmt: %w", cerr)
		}
	}
	if q.listHousesStmt != nil {
		if cerr := q.listHousesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listHousesStmt: %w", cerr)
		}
	}
	if q.updateCityStmt != nil {
		if cerr := q.updateCityStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCityStmt: %w", cerr)
		}
	}
	if q.updateHouseStmt != nil {
		if cerr := q.updateHouseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateHouseStmt: %w", cerr)
		}
	}
	if q.updatePublicationURLStmt != nil {
		if cerr := q.updatePublicationURLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePublicationURLStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	createCityStmt               *sql.Stmt
	createHouseStmt              *sql.Stmt
	createPublicationURLStmt     *sql.Stmt
	deleteAllPublicationURLsStmt *sql.Stmt
	deleteCityStmt               *sql.Stmt
	deleteHouseStmt              *sql.Stmt
	deletePublicationURLStmt     *sql.Stmt
	getCityStmt                  *sql.Stmt
	getHouseStmt                 *sql.Stmt
	getMainPublicationURLStmt    *sql.Stmt
	getPublicationURLsStmt       *sql.Stmt
	isCityUsedByHousesStmt       *sql.Stmt
	listCitiesStmt               *sql.Stmt
	listHousesStmt               *sql.Stmt
	updateCityStmt               *sql.Stmt
	updateHouseStmt              *sql.Stmt
	updatePublicationURLStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		createCityStmt:               q.createCityStmt,
		createHouseStmt:              q.createHouseStmt,
		createPublicationURLStmt:     q.createPublicationURLStmt,
		deleteAllPublicationURLsStmt: q.deleteAllPublicationURLsStmt,
		deleteCityStmt:               q.deleteCityStmt,
		deleteHouseStmt:              q.deleteHouseStmt,
		deletePublicationURLStmt:     q.deletePublicationURLStmt,
		getCityStmt:                  q.getCityStmt,
		getHouseStmt:                 q.getHouseStmt,
		getMainPublicationURLStmt:    q.getMainPublicationURLStmt,
		getPublicationURLsStmt:       q.getPublicationURLsStmt,
		isCityUsedByHousesStmt:       q.isCityUsedByHousesStmt,
		listCitiesStmt:               q.listCitiesStmt,
		listHousesStmt:               q.listHousesStmt,
		updateCityStmt:               q.updateCityStmt,
		updateHouseStmt:              q.updateHouseStmt,
		updatePublicationURLStmt:     q.updatePublicationURLStmt,
	}
}
